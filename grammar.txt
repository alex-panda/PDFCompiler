-------------------------------------------------------------------------------
Grammar Rules:

file           : FILE_START document FILE_END

document       : PB? paragraph* PB?

paragraph      : PB? writing

writing        : python|cmnd_def|cmnd_call|text_group|plain_text

python         : PYTHON_EVAL|PYTHON_EXEC
---------------
cmnd_def       : IDENTIFIER PB? EQUAL_SIGN PB? (OPAREN (cmnd_param (PB? COMMA cmnd_param)*)? PB? CPAREN)? text_group

cmnd_param     : PB? cmnd_param|cmnd_key_param

cmnd_key_param : IDENTIFIER PB? EQUAL_SIGN PB? text_group

cmnd_tex_param : IDENTIFIER
---------------
cmnd_call      : IDENTIFIER (cmnd_arg)*

cmnd_arg       : PB? cmnd_key_arg|cmnd_tex_arg

cmnd_key_arg   : OCBRACE IDENTIFIER PB? EQUAL_SIGN PB? text_group CCBRACE

cmnd_tex_arg   : text_group
---------------
text_group     : OCBRACE document CCBRACE

plain_text     : (EQUAL_SIGN|COMMA|OPAREN|CPAREN|OBRACE|CBRACE|WORD)+

-------------------------------------------------------------------------------
Legend:
    ? means "zero or one of" whatever's before it
    * means "zero or more of" whatever's before it
    + means "one or more of" whatever's before it
    | means "or"
    () groups things so that "?" or "*" affects the entire group
    PB = PARAGRAPH_BREAK

Note: In "writing", the rules must be parsed in the order specified because they
    go from narrowest to broadest (as in, python statements accept very specific
    tokens, then cmnd_call accepts more types of tokens, and then plain_text
    accepts the most types of tokens).

Note: When putting text on the PDF, the two PARAGRAPH_BREAKs in "document" are
    always ignored. They just exist so that there will not be a paragraph
    break at the start of a PDF document or at the end of one.

Note: When putting text on the PDF, "paragraph" will only honor the
    PARAGRAPH_BREAK if "writing" is not an empty string, otherwise the
    PARAGRAPH_BREAK will be ignored.

