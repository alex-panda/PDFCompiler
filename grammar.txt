-------------------------------------------------------------------------------
The Grammar right now:

RULE_NAME    : RULE_DESCRIPTION

file            : FILE_START document FILE_END

document        : PARAGRAPH_BREAK? paragraphs*

paragraph       : writing PARAGRAPH_BREAK?

writing         : python|plain_text

python          : python_1st_eval|python_1st_exec|python_2nd_eval|python_2nd_exec

python_2nd_exec : PASS2EXEC

python_2nd_eval : PASS2EVAL

python_1st_exec : PASS1EXEC

python_1st_eval : PASS1EVAL

plain_text      : (OCBRACE|CCBRACE|EQUAL_SIGN|WORD)*

-------------------------------------------------------------------------------
The Grammar in the Future:

file         : FILE_START document FILE_END

document     : PARAGRAPH_BREAK? paragraphs*

paragraph    : writing PARAGRAPH_BREAK?

writing      : python|cmnd_call|plain_text

python       : PASS1EXEC|PASS2EXEC|PASS1EVAL|PASS2EVAL

plain_text   : (OCBRACE|CCBRACE|EQUAL_SIGN|WORD)*

cmnd_call    : CMND_NAME (cmnd_exp* (cmnd_key_exp*)?)?

cmnd_exp     : LCBRACE paragraph* RCBRACE

cmnd_key_exp : LCBRACE WORD EQUAL_SIGN paragraph* RCBRACE

-------------------------------------------------------------------------------
Legend:
    ? means "zero or one of" whatever's before it
    * means "zero or more of" whatever's before it
    | means "or"
    () groups things so that "?" or "*" affects the entire group

Note: In "writing", the rules must be parsed in that order because they go
    from narrowest to broadest (as in, python statements accept very specific
    tokens, then cmnd_call accepts more tokens, and then plain_text accepts
    the most types of tokens).

Note: When putting text on the PDF, the PARAGRAPH_BREAK in "document" is always
    ignored.

Note: When putting text on the PDF, "paragraph" will only honor the
    PARAGRAPH_BREAK if "writing" is not an empty string, otherwise the
    PARAGRAPH_BREAK will be ignored.
